{
	"version": 3,
	"file": "mobilemenu.css",
	"sourceRoot": "/home/lucash/NTUST_GIMT/2025_Spring_Semester/cloud-and-fog-computing-in-the-iot/cf-iot-spring-25-project/website",
	"sources": [
		"themes/zen/assets/sass/mobilemenu.scss",
		"themes/zen/assets/sass/_init.scss",
		"themes/zen/assets/sass/_sass_variables.scss",
		"assets/sass/_extra.scss",
		"themes/zen/assets/sass/mixins/breakpoint/_respond-to.scss",
		"themes/zen/assets/sass/mixins/clearfix/_clearfix.scss",
		"themes/zen/assets/sass/mixins/debug/_debug.scss",
		"themes/zen/assets/sass/mixins/flex-calc/_flex-calc.scss",
		"themes/zen/assets/sass/mixins/overlay/_overlay.scss",
		"themes/zen/assets/sass/mixins/spacing/_spacing.scss"
	],
	"sourcesContent": [
		"// The mobile navigation stylesheet for this theme.\n\n@import 'init';\n\n.main-menu,\n.header__region { // stylelint-disable selector-class-pattern\n  display: none;\n\n  @include respond-to(s) {\n    display: block;\n  }\n} // stylelint-enable selector-class-pattern\n\n.mobile-nav {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  font-family: var(--ff-headings);\n  z-index: 20;\n  pointer-events: none;\n\n  @include respond-to(s) {\n    display: none;\n  }\n\n  &[data-navopen] {\n    position: fixed;\n  }\n\n  .language-icon {\n    fill: var(--color-text-bg);\n  }\n\n  &__cover {\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    background-color: var(--color-mobile-menu-cover);\n    opacity: 0;\n\n    [data-navopen] & {\n      opacity: 1;\n      pointer-events: auto;\n    }\n  }\n\n  &__toggle {\n    display: flex;\n    align-items: center;\n    position: absolute;\n    top: var(--gutters);\n    right: var(--gutters);\n    margin: 0;\n    padding: 0 .3rem;\n    border-color: var(--color-button-text-hover);\n    font-weight: var(--fw-bold);\n    z-index: 22;\n    pointer-events: auto;\n\n    @include respond-to(s) {\n      display: none;\n    }\n\n    &:hover,\n    &:focus-visible {\n      svg {\n        fill: var(--color-button-text-hover);\n      }\n\n      &.button--outline {\n        border-color: var(--color-button-text-hover);\n      }\n    }\n  }\n\n  &__hamburger {\n    fill: var(--color-button-text);\n    width: 1.6rem;\n    margin-inline-start: .1rem;\n\n    .button--outline & {\n      fill: var(--color-button);\n    }\n\n    rect {\n      transform-origin: center;\n    }\n\n    [data-navopen] & {\n      rect {\n        y: 45px;\n\n        &:nth-of-type(1) {\n          transform: rotate(45deg);\n        }\n\n        &:nth-of-type(2) {\n          opacity: 0;\n        }\n\n        &:nth-of-type(3) {\n          transform: rotate(-45deg);\n        }\n      }\n    }\n  }\n\n  &__sheet {\n    visibility: hidden;\n    background-color: var(--color-mobile-menu);\n    width: 90vw;\n    height: 100vh;\n    padding: 2.25rem;\n    transform: translateX(100vw);\n    z-index: 21;\n\n    [data-navopen] & {\n      visibility: visible;\n      pointer-events: auto;\n      box-shadow: -10px 0 10px -10px var(--color-nearblack);\n      transform: translateX(10vw);\n    }\n  }\n\n  &__region {\n    &:not(:empty) {\n      margin-block-end: .5rem;\n    }\n  }\n\n  &__navbar {\n    display: flex;\n    flex-direction: column;\n    padding-inline-start: 0;\n    margin-block: 0;\n\n    li {\n      list-style: none;\n    }\n\n    a {\n      display: inline-block;\n      padding-block: .5rem;\n    }\n  }\n\n  &__cover,\n  &__toggle,\n  &__hamburger > rect,\n  &__sheet {\n    // Add some transitions unless user prefer less motion.\n    @media (prefers-reduced-motion: no-preference) {\n      transition: all 130ms ease-in;\n\n      [data-navopen] & {\n        transition: all 330ms ease-out;\n      }\n    }\n  }\n}\n",
		"// Initialization partial\n\n// To make it easier to use all variables and mixins in any Sass file in this\n// project, each .scss file has a `@import 'init';` declaration. The _init.scss\n// file is in charge of importing all the other partials needed for the\n// project.\n\n// Variables.\n@import 'sass_variables';\n@import 'extra';\n\n// Mixins and functions.\n@import 'mixins/breakpoint/respond-to';\n@import 'mixins/clearfix/clearfix';\n@import 'mixins/debug/debug';\n@import 'mixins/flex-calc/flex-calc';\n@import 'mixins/overlay/overlay';\n@import 'mixins/spacing/spacing';\n",
		"// Variables\n// Override sass variables in \"assets/sass/_extra.scss\"\n\n// Base line height, unitless.\n$base-line-height: 1.5;\n\n// The font sizes in our type hierarchy as tee shirt sizes.\n// Size m is base.\n// Use like this: var(--fs-m)\n$font-size-fixed: (\n  xxxxl:      3rem,\n  xxxl:       2.5rem,\n  xxl:        2rem,\n  xl:         1.5rem,\n  l:          1.25rem,\n  m:          1rem,\n  s:          0.889rem,\n  xs:         0.778rem,\n);\n\n// The responsive font sizes in our type hierarchy as tee shirt sizes.\n// Size m is base.\n// Use like this: var(--fs-m)\n$font-size-fluid: (\n  xxxxl:      clamp(2.4881rem, calc(1.8896rem + 2.9924vw), 4.2088rem),\n  xxxl:       clamp(2.0738rem, calc(1.6968rem + 1.8848vw), 3.1575rem),\n  xxl:        clamp(1.7281rem, calc(1.5053rem + 1.1141vw), 2.3688rem),\n  xl:         clamp(1.44rem, calc(1.3228rem + 0.5859vw), 1.7769rem),\n  l:          clamp(1.2rem, calc(1.1537rem + 0.2315vw), 1.3331rem),\n  m:          1rem,\n  s:          0.889rem,\n  xs:         0.778rem,\n);\n\n// Set the font sizes to use, fixed or fluid.\n// $font-size: $font-size-fluid;\n$font-size: $font-size-fixed;\n\n// Breakpoints\n// Use the `respond-to(s)` mixin to use named breakpoints.\n$breakpoints: (\n  'xxxl':     1222px,\n  'xxl':      1111px,\n  'xl':       999px,\n  'l':        888px,\n  'm':        777px,\n  's':        666px,\n  'xs':       555px,\n  'xxs':      444px,\n  'xxxs':     333px,\n);\n\n// Spacing\n// Generates mt--m (mt = margin-top), mb--m (mb = margin-bottom) and\n// mx--m (mx = margin-block) classes.\n$spacing: (\n  xxl:        3,\n  xl:         2,\n  l:          1.5,\n  m:          1,\n  s:          0.75,\n  xs:         0.5,\n  xxs:        0.3,\n  0:          0,\n);\n\n// The max content width. (Consider using one of the breakpoints.)\n$max-content-width: 1111px;\n\n// The max page width. Defaults to max-content-width.\n// Setting this to a larger value than max-content-width allows\n// content with class \"stretch\" to stretch out to the page edge.\n// $max-page-width: 1111px;\n\n// Show horizontal grid to help with debugging typography.\n$debug: false;\n",
		"// Set the font sizes to use, fixed or fluid.\n$font-size: $font-size-fluid;\n\n// The max content width. (Consider using one of the breakpoints.)\n$max-content-width: 777px;\n\n// The max page width. Defaults to max-content-width.\n// Setting this to a larger value than max-content-width allows\n// content with class \"stretch\" to stretch out to the page edge.\n$max-page-width: 1111px;\n",
		"@mixin respond-to($breakpoint) {\n  // If the key exists in the map\n  @if map-has-key($breakpoints, $breakpoint) {\n    // Prints a media query based on the value\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (min-width: $breakpoint) {\n      @content;\n    }\n  }\n}\n\n@mixin respond-to-max($breakpoint) {\n  // If the key exists in the map\n  @if map-has-key($breakpoints, $breakpoint) {\n    // Prints a media query based on the value\n    @media (max-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (max-width: $breakpoint) {\n      @content;\n    }\n  }\n}\n",
		"// clearfix()\n//\n// Allows the bottom of an element to extend to the bottom of all floated\n// children elements. @see http://nicolasgallagher.com/micro-clearfix-hack/\n//\n// We use the micro-clearfix, optimized for use in `@extend` where fewer `&` is\n// better.\n@mixin clearfix() {\n  &::before {\n    content: '';\n    display: table;\n  }\n\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n}\n",
		"// Output a horizontal grid to help with debugging typography.\n@mixin debug-grid() {\n  @if $debug == true {\n    $grid-height: #{$base-line-height + 'rem'};\n\n    position: relative;\n    // stylelint-disable-next-line  max-line-length\n    background-image: repeating-linear-gradient(180deg, var(--color-debug-color), var(--color-debug-color) 1px, transparent 1px, transparent $grid-height);\n\n    &::after {\n      content: '';\n      position: absolute;\n      bottom: -1px;\n      left: 0;\n      height: 1px;\n      width: 100%;\n      background-color: var(--color-debug-color);\n    }\n  }\n}\n",
		"@mixin flex($col, $gap) {\n  flex-basis: calc(100% / #{$col} - #{$gap * $base-line-height + 'rem'});\n}\n",
		"@mixin overlay() {\n  --color-overlay: var(--color-black-20);\n  --color-overlay2: var(--color-black-10);\n  border-image: linear-gradient(var(--color-overlay), var(--color-overlay2)) fill 1;\n}\n",
		"@mixin spacing($property, $spacing, $unit) {\n  $converted-list: ();\n\n  @each $x in $spacing {\n    $xunit: $unit;\n\n    @if $x == 0 {\n      $xunit: '';\n    }\n\n    $spacing: #{$x * $base-line-height + $xunit};\n    $converted-list: join($converted-list, $spacing, $separator: space);\n  }\n\n  #{$property}: $converted-list;\n}\n\n@mixin gap($x, $unit: 'rem') {\n  @include spacing(gap, $x, $unit);\n}\n\n@mixin margin($x, $unit: 'rem') {\n  @include spacing(margin, $x, $unit);\n}\n\n@mixin margin-inline($x, $unit: 'rem') {\n  @include spacing(margin-inline, $x, $unit);\n}\n\n@mixin margin-inline-start($x, $unit: 'rem') {\n  @include spacing(margin-inline-start, $x, $unit);\n}\n\n@mixin margin-inline-end($x, $unit: 'rem') {\n  @include spacing(margin-inline-end, $x, $unit);\n}\n\n@mixin margin-block($x, $unit: 'rem') {\n  @include spacing(margin-block, $x, $unit);\n}\n\n@mixin margin-block-start($x, $unit: 'rem') {\n  @include spacing(margin-block-start, $x, $unit);\n}\n\n@mixin margin-block-end($x, $unit: 'rem') {\n  @include spacing(margin-block-end, $x, $unit);\n}\n\n@mixin margin-top($x, $unit: 'rem') {\n  @include spacing(margin-top, $x, $unit);\n}\n\n@mixin margin-bottom($x, $unit: 'rem') {\n  @include spacing(margin-bottom, $x, $unit);\n}\n\n@mixin margin-left($x, $unit: 'rem') {\n  @include spacing(margin-left, $x, $unit);\n}\n\n@mixin margin-right($x, $unit: 'rem') {\n  @include spacing(margin-right, $x, $unit);\n}\n\n@mixin padding($x, $unit: 'rem') {\n  @include spacing(padding, $x, $unit);\n}\n\n@mixin padding-inline($x, $unit: 'rem') {\n  @include spacing(padding-inline, $x, $unit);\n}\n\n@mixin padding-inline-start($x, $unit: 'rem') {\n  @include spacing(padding-inline-start, $x, $unit);\n}\n\n@mixin padding-inline-end($x, $unit: 'rem') {\n  @include spacing(padding-inline-end, $x, $unit);\n}\n\n@mixin padding-block($x, $unit: 'rem') {\n  @include spacing(padding-block, $x, $unit);\n}\n\n@mixin padding-block-start($x, $unit: 'rem') {\n  @include spacing(padding-block-start, $x, $unit);\n}\n\n@mixin padding-block-end($x, $unit: 'rem') {\n  @include spacing(padding-block-end, $x, $unit);\n}\n\n@mixin padding-top($x, $unit: 'rem') {\n  @include spacing(padding-top, $x, $unit);\n}\n\n@mixin padding-bottom($x, $unit: 'rem') {\n  @include spacing(padding-bottom, $x, $unit);\n}\n\n@mixin padding-left($x, $unit: 'rem') {\n  @include spacing(padding-left, $x, $unit);\n}\n\n@mixin padding-right($x, $unit: 'rem') {\n  @include spacing(padding-right, $x, $unit);\n}\n"
	],
	"names": [],
	"mappings": "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"
}